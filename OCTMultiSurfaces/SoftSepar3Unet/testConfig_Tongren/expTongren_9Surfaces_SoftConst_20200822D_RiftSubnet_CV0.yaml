# base on corrected and refined Ground truth with guarantee of surface separation constraint.
# total 46 patient exclude ill patient images.
# raw segmentation xml file directory: /home/hxie1/data/OCT_Tongren/refinedGT_20200204
# convert data script: /local/vol00/scratch/Users/hxie1/Projects/DeepLearningSeg/OCTMultiSurfaces/dataPrepare_Tongren/convertRefineData_10Surface_20200509.py
# numSurface = 10 as deleted inaccurate surface 8
# training set uses all good bscans, while test and validation set use all 31 Bscans, but measure accuracy for good Bscans.

# 3 Unets train Surface, Rift, and Lambda
# use L1Loss and DivLoss for rift
# Aug 22nd, 2020
# A.  reduce number of layers of Unet from 7 to 6;
# B.  add m_rifts covolution layers;



debug: False # debug mark
dataIn1Parcel: True
useIndependentValidation: True
# Duke data is not in one parcel, while Tongren, JHU are in one parcel.
# dataIn1Parcel means each patient has a volume file.

dataDir: "/home/hxie1/data/OCT_Tongren/numpy/10FoldCVForMultiSurfaceNet/"
existGTLabel: True
# log will save at: dataDir + "/log/" + network + "/" + experimentName
K: 10  # Kfold cross validation
k: 0   # the fold k test
# training data:  dataDir + training + images_CV{k}.npy
#         label: dataDir + training + surfaces_CV{k}.npy
#         IDs  : dataDir + training + patientID_CV{k}.json

# validation data:  dataDir + validation + images_CV{k}.npy
#           label: dataDir + validation + surfaces_CV{k}.npy
#           IDs  : dataDir + validation + patientID_CV{k}.json

# test data:  dataDir + test + images_CV{k}.npy
#     label: dataDir + test + surfaces_CV{k}.npy
#     IDs  : dataDir + test + patientID_CV{k}.json

# when do not use cross validation:
# training data:  dataDir + training + images.npy
#         label: dataDir + training + surfaces.npy
#         IDs  : dataDir + training + patientID.json

# validation data:  dataDir + validation + images.npy
#           label: dataDir + validation + surfaces.npy
#           IDs  : dataDir + validation + patientID.json

# test data:  dataDir + test + images.npy
#     label: dataDir + test + surfaces.npy
#     IDs  : dataDir + test + patientID.json

groundTruthInteger: True
# 3xSigma < H/4 is  a good choice for Rift sigma
sigma: 20.0  # For gaussian  ground truth, in float, 0 means use dynamic Sigma
device: torch.device('cuda:2')   #GPU ID
#device: torch.device('cpu')
batchSize: 4
# phased training with different learning rate
learningRate: 0.01


network: "RiftSubnet"
inputHeight: 496   # original height
inputWidth: 512   # rawImageWidth
maxRift:  50.0 # maxRift + 3*sigma < H/2
useBetterRiftGaussian: True
imageVerticalShift: 0
scaleNumerator: 1
scaleDenominator: 1
inputChannels: 8 # rawImage + gradChannels
nLayers: 6  # for rift
numSurfaces: 9  # num of surfaces in an image
startFilters: 24  # the num of filters in first layer of Unet
gradChannels: 7   # the added gradient channels beside raw image channel
bothSideGrad: True # False use singleSideGrad
gradWeight: 10   # image grade weight to adjust WeightedDivLoss.

# some physical parameter of images
slicesPerPatient: 31  # for test and validation set
hPixelSize: 3.870  # unit: micrometer, in y/height direction

# data augmentation
augmentProb: 0.4  #  data augmentation rate
gaussianNoiseStd: 0.1 # gausssian nosie std with mean =0
# for salt pepper noise
saltPepperRate: 0.05  # rate = (salt+pepper)/allPixels
saltRate: 0.5  # saltRate = salt/(salt+pepper)
rotation: False
flippingProb: 0.3
lacingWidth: 0  # Lace the both end of 0 or 360 degree to offset inaccurate segementation at boundary of input image
TTA: False       #TestTime Augmentation
TTA_StepDegree: 0 # roration step degree of TTA, in integer degree
# data augmentation

netPath: "/home/hxie1/data/OCT_Tongren/numpy/10FoldCVForMultiSurfaceNet/netParameters"  # net is saved at netpath / network / self_filename
loadNetPath: ""
outputDir: ""

usePrimalDualIPM: True
useLayerDice: False
useReferSurfaceFromLayer: False
useLayerCE: False
useCEReplaceKLDiv: False
useSmoothSurfaceLoss: True
useWeightedDivLoss: True
useRift: True
smoothRift: True  # smooth Rift in ground truth
smoothHalfWidth: 15  # 5% of image width
smoothPadddingMode: "reflect" # paddingMode: 'constant', 'reflect', 'replicate' or 'circular'.
smoothRbeforeLoss: False  # use smooth predicted R to compare loss with smooth ground truth R

gradientRiftConvGoBack: False

useCalibrate: False  # Calibrate mu according to r and sigma2
useMergeMuRift: False #  update mu according to r and sigma2
useLearningPairWeight: True  # learning pairwise weight
fixedPairWeight: False  # in soft constraint, pairwise terms add weight $\sigma_i^2/(\sigma_i^2 + \sigma_{i-1}^2)$



# constrained model, both False meaning RelU
hardSeparation: 1 # 0: No ReLU; 1:ReLU; 2: hardSeparation
softSeparation: True
useReLUInPretrain: True

goodBscans: []

# in rift loss
useL1Loss: False
useSmoothSurfaceLoss: True
useKLDivLoss: True